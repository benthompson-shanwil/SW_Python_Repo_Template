[project]
requires-python = ">=3.9"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
preview = true
select = ['ALL']
dummy-variable-rgx = "^_$"
ignore = ['PLR0917', 'PLR2004', 'D200', 'D202', 'D203', 'D205', 'D212', 'D300', 'D400', 'D401',
    'D404', 'DOC201', 'DOC501', 'ANN003', 'TRY003', 'FBT001', 'FBT002', 'D413', 'COM812', 'ISC001',
    'CPY001', 'RUF013', 'S608', 'PLR0904', 'ANN204', 'D107', 'ANN002', 'W293']

# PLR0917 -- Detects too many position arguments (for function calls) but incorrectly detects function signatures.
# PLR2004 -- Detects 'magic values' e.g. constants. Can be useful, but too broad.
# D200 -- One-line docstring should fit on one line with quotes. Not the standard we use.
# D202 -- No blank lines allowed after function docstring. Conflicts with standard we use.
# D203 -- 1 blank line required before class docstring. Conflicts with standard we use.
# D205 -- Seperates the summary of a docstring from the rest of the docstring. Not desired as it doesn't support
# multi-line summaries.
# D212 -- Multi-line docstring summary should start at the first line. Not the standard we use.
# D300 -- Use """triple double quotes""". Already enforced through flake8-quotes.
# D400 -- First line should end with a period. Already enforced with D415.
# D401 -- First line should be in imperative mood. Too strict and unneccessary.
# D404 -- First word of the docstring should not be This. Too strict and unneccessary.
# D413 -- Missing blank line after last section in docstring. Not the docstring standard we use.
# DOC201 -- Return is not documented in docstring. Doesn't properly support the docstring format we use.
# DOC501 -- Raised exception missing from docstring. Doesn't properly support the docstring format we use.
# ANN003 -- Requires type declaration for kwargs. Always going to be a dict, so whats the point?
# TRY003 -- Requires exception messages to be declared in the exception class. Seems excessive.
# FBT001 -- If a function has a boolean argument with a default value, it wants us to split it
# into seperate functions. Not the standard that we use, or Numpy, or even matplotlib.
# FBT002 -- If a function has a boolean argument with a default value, it wants us to split it
# into seperate functions. Not the standard that we use, or Numpy, or even matplotlib.
# COM812 -- Missing trailing comma. Not the standard we use.
# ISC001 -- Two strings are concatenated implicitly on the same line. Can cause issues with Ruff formatter.
# CPY001 -- Ensures that a copyright notice is at the top of every file. We may want this eventually.
# RUF013 -- Prohibits implicit Optional, e.g. requires Optional[list] = None. Too verbose and causes issues.
# S608 -- Detects hardcoded SQL statements. Supposed to prevent SQL injection, but it is too liberal
# with flagging.
# PLR0904 -- Detects too many public functions in a class. Too strict and unneccessary.
# ANN204 -- Requires return types for special funcs like __init__. Unnecessary and verbose.
# D107 -- Missing docstring in __init__. Usually __init__ functions are self-explanatory.
# ANN002 -- Missing type annotation for *var. Can be unclear on how to annotate.
# W293 -- Blank line contains whitespace. Pycharm automatically indents blank lines.

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = true

[tool.ruff.lint.pylint]
max-args = 30
max-locals = 30

[tool.ruff.lint.mccabe]
max-complexity = 30

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
docstring-quotes = "double"

[tool.ruff.lint.isort]
split-on-trailing-comma = false